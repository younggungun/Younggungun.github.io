<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习笔记基础知识(一)</title>
    <url>/2020/05/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    <content><![CDATA[<p><img data-src="D:%5C%E5%AD%A6%E6%A0%A1%5CWEB%E7%AB%AF%E5%BC%80%E5%8F%91%5C%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200507150905.jpg" alt="微信图片_20200507150905"></p>
<h1 id="https-www-bilibili-com-video-BV1jt411H71h"><a href="#https-www-bilibili-com-video-BV1jt411H71h" class="headerlink" title="https://www.bilibili.com/video/BV1jt411H71h"></a><a href="https://www.bilibili.com/video/BV1jt411H71h" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1jt411H71h</a></h1><h1 id><a href="#" class="headerlink" title></a><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200507155244272.png" alt="image-20200507155244272"></h1><img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507155341754.png" alt="image-20200507155341754" style="zoom:50%;">



<p>三大平台：JavaSE 标准版、JavaME、<strong>JavaEE 企业版 enterprise edition</strong>  框架spring boot，spring cloud，</p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507194116508.png" alt="image-20200507194116508" style="zoom:50%;">















<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507162925346.png" alt="image-20200507162925346" style="zoom:50%;">





<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507162954698.png" alt="image-20200507162954698" style="zoom:50%;">





<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507163217819.png" alt="image-20200507163217819" style="zoom:50%;">







<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507163403708.png" alt="image-20200507163403708" style="zoom:33%;">



<p> <a href="https://www.bilibili.com/video/BV1U4411M71p" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1U4411M71p</a> </p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507162759966.png" alt="image-20200507162759966" style="zoom:50%;">





<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200512115507838.png" alt="image-20200512115507838"></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><strong>基础知识</strong></h1><h2 id="一、语言本身"><a href="#一、语言本身" class="headerlink" title="一、语言本身"></a><strong>一、语言本身</strong></h2><ul>
<li>语法基础</li>
<li>OO编程思想：类、对象、封装、继承、多态、接口</li>
<li>容器</li>
<li>异常</li>
<li>泛型</li>
<li>I/O</li>
<li><strong>注解</strong></li>
<li><strong>反射</strong></li>
<li><del>图形化界面，如 <code>swing</code>的东西跳过不看</del></li>
</ul>
<hr>
<h3 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h3><h4 id="dos命令"><a href="#dos命令" class="headerlink" title="dos命令"></a>dos命令</h4><img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507192226722.png" alt="image-20200507192226722" style="zoom:50%;">

<ul>
<li>大小写敏感； </li>
<li>类名的每个单词首字母应该大写 ； </li>
<li>所有的方法名都应该以<strong><em>小写字母开头</em></strong>  如果方法名含有若干单词，则后面的每个单词首字母大写。 </li>
<li>源文件名必须和类名相同 ，xxx.java</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>存储在内存；变量作用域：一对{}内有效；与c不同 要初始化；</p>
<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>​                基本数据类型：数值型：整数型：byte 1字节（-128 127） short  2     int 4    long 8字节 long m =8l</p>
<p>​                                                          浮点数：float 4字节  float a=1.1f  7位有效数字  double 8字节 16位有效数字</p>
<p>​                                           字符型：chart 根据unicode进行运算 ;单引号’’</p>
<p>​                引用数据类型：类 class     string 字符串常量=“ hello world” </p>
<p>​                                           接口 interface</p>
<p>​                                           <strong>数组[]</strong></p>
<p>​                                           Lambda</p>
<p>​                                        </p>
<p>​                                            <strong>引用都可以用null 初始化。</strong></p>
<p>  int a =1   int b =1    内存有两个1</p>
<p>string a= “hello” string b=”hello”  内存的字符串常量池内只有一个hello</p>
<hr>
<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507203434603.png" alt="image-20200507203434603" style="zoom:67%;">        

<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200521213751659.png" alt="image-20200521213751659"></p>
<ul>
<li><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200521213816756.png" alt="image-20200521213816756"></li>
<li></li>
<li>多种类型的数据混合运算，先自动把数据转换成容量最大的数据类型再运算</li>
<li>string类型 的+运算时，+前按数学运算，+后安字符串拼接；例如 System.out.println(‘a’+1+”abc”+1+2) -&gt;&gt;88abc12    </li>
<li>强制类型转换的逆转换，可能造成精度降低或者溢出；</li>
<li>通常字符串不转换为基础类型，但通过基本类型对应的包装类可实现，如：string a =“43”，int i =Integer.parseInt(a)</li>
<li>boolean不可强制转换为其他数据类型</li>
</ul>
<p>boolean 不能o和非0替代true false 无null</p>
<ul>
<li><p>局部变量</p>
<p>在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。 </p>
</li>
<li><p>类变量（静态变量） </p>
<p>​        类变量也声明在类中，方法体之外，但必须声明为static类型。 </p>
</li>
<li><p>成员变量（非静态变量）</p>
<p>​        成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。 </p>
<hr>
</li>
</ul>
<h4 id="标示符："><a href="#标示符：" class="headerlink" title="标示符："></a>标示符：</h4><ul>
<li>a<del>z A</del>Z 0~9 _ <strong>$</strong></li>
<li>数字不开头</li>
<li>不可只用关键字和保留字</li>
<li>严格区分大小写</li>
<li><strong>不能包含空格</strong></li>
</ul>
<hr>
<h4 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h4><p>​            <img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200521213535980.png" alt="image-20200521213535980"></p>
<table>
<thead>
<tr>
<th align="center">关键字都小写</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">class</td>
<td></td>
<td></td>
<td>byte</td>
<td>short</td>
</tr>
<tr>
<td align="center">int</td>
<td>long</td>
<td>float</td>
<td>double</td>
<td>char</td>
</tr>
<tr>
<td align="center">boolean</td>
<td>void</td>
<td>abstract</td>
<td>extends</td>
<td>final修饰常量</td>
</tr>
<tr>
<td align="center">implements</td>
<td>native</td>
<td>new</td>
<td>static</td>
<td>strictfp</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">true</td>
<td></td>
<td>null</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">if</td>
<td>else</td>
<td>switch</td>
<td>case</td>
<td>default</td>
</tr>
<tr>
<td align="center">while</td>
<td>do</td>
<td>for</td>
<td>break</td>
<td>continue</td>
</tr>
<tr>
<td align="center">return</td>
<td>instanceof</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">private</td>
<td>protected</td>
<td>public</td>
<td>default</td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">import</td>
<td>package</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">super</td>
<td>whis</td>
<td>void</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td>const</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li><p>5%-2 =1  -5%2=-1 </p>
</li>
<li><p>‘星号’+’\t’+’星号’ ==93，”*”+’\t’+’星号’ ==星       星 </p>
</li>
<li><p><strong>字符串的+=是字符串的拼接。变量参与运算时把结果强制转换为当前变量类型；</strong></p>
<p>​            如：short a=1  a=(short)(a+3) -&gt;&gt;&gt; a+=3</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; </span><br><span class="line">	<span class="keyword">byte</span> b1=<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">byte</span> b2=<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">byte</span> b3=<span class="number">1</span> + <span class="number">2</span>; 						<span class="comment">//编译正确 在byte范围内</span></span><br><span class="line">    <span class="keyword">byte</span> b4=b1 + b2; 					<span class="comment">//编译失败  b1 b2虽然被初始化，但具有不确定性</span></span><br><span class="line">    System.out.println(b3); </span><br><span class="line">    System.out.println(b4); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table>
<thead>
<tr>
<th>与</th>
<th>&amp;</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>或</td>
<td>|</td>
<td></td>
</tr>
<tr>
<td>非</td>
<td>！</td>
<td></td>
</tr>
<tr>
<td>逻辑异或</td>
<td>^</td>
<td></td>
</tr>
<tr>
<td>短路与</td>
<td>&amp;&amp;</td>
<td>\1. 两边都是true，结果是true \2. 一边是false，结果是false 短路特点：符号左边是false，右边不再运算</td>
</tr>
<tr>
<td>短路或</td>
<td>||</td>
<td>\1. 两边都是false，结果是false \2. 一边是true，结果是true 短路特点： 符号左边是true，右边不再运算</td>
</tr>
</tbody></table>
<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507210834302.png" alt="image-20200507210834302" style="zoom:50%;">

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>(结果为布尔类型的语句)?表达式1:表达式2</p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200507211158522.png" alt="image-20200507211158522" style="zoom: 50%;">

<h4 id="if-else、switch"><a href="#if-else、switch" class="headerlink" title="if-else、switch"></a>if-else、switch</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">	执行语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">	执行语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">	执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	执行语句<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//。。。。。</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">case后面只能跟常量,不能跟变量</span></span><br><span class="line"><span class="comment">default可以在switch语句的任何位置.switch语句遇见break结束,或者程序默认执行到末尾结束.</span></span><br><span class="line"><span class="comment">case的穿透性</span></span><br><span class="line"><span class="comment">在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运 行，直到遇到break，或者整体switch结束。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="循环语句-for、-while、-do-while-嵌套；"><a href="#循环语句-for、-while、-do-while-嵌套；" class="headerlink" title="循环语句 for、  while、 do/while 嵌套；"></a>循环语句 for、  while、 do/while 嵌套；</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">	System.out.printIn(i);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">int</span> i =<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   	语句<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(m&lt;<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h5 id="for-和-while-的小区别："><a href="#for-和-while-的小区别：" class="headerlink" title="for 和 while 的小区别："></a>for 和 while 的小区别：</h5><ul>
<li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继 </li>
</ul>
<p>续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消 </p>
<p>失，能够提高内存的使用效率。 </p>
<ul>
<li>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while</li>
</ul>
<p>break可以终止当前循环;</p>
<p>continue 跳出当前循环继续进入下一个循环;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        System,out.printIn(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>return 可结束方法或过程；其后代码失效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//直接跳出整个方法；print不执行</span></span><br><span class="line">		<span class="keyword">break</span>;<span class="comment">//跳出当前循环，执行print</span></span><br><span class="line">	&#125;;</span><br><span class="line">	System,out.printIn(i);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><h4 id="Final修饰变量方法和类"><a href="#Final修饰变量方法和类" class="headerlink" title="Final修饰变量方法和类"></a>Final修饰变量方法和类</h4><ul>
<li><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200512155740830.png" alt="image-20200512155740830"></p>
</li>
</ul>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li>引用数据格式</li>
<li>数据类型唯一</li>
<li>长度在运行期间不可更改</li>
</ul>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>动态初始化（指定长度）</p>
<p>​        int[]arrayA= new  int[100];</p>
<p>​        double[]arrayB= new double[300];</p>
<p>​        String[]arrayString= new String[5]</p>
<p>​        double[]arrayB；    </p>
<p>​        arrayB= new double[300];    </p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200512160249033.png" alt="image-20200512160249033" style="zoom:67%;">



<p>静态初始化（指定内容）</p>
<p>​         int[]arrayA= new  int[]{1,2,3};   //推算数组长度</p>
<p>​        先声明再初始化</p>
<p>​        int[]arrayA；</p>
<p>​        arrayA= new  int[]{1,2,3};  </p>
<p>省略型静态初始化</p>
<p>​         int[]arrayA= {1,2,3};</p>
<p>​        <strong>不能拆能两步骤</strong></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200512155952232.png" alt="image-20200512155952232"></p>
<h5 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.desktop.SystemSleepEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> min=<span class="number">0</span>, max=arr.length-<span class="number">1</span>;min&lt;max;min++,max--)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=arr[min];</span><br><span class="line">           arr[min]=arr[max];</span><br><span class="line">           arr[max]=x;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组作为方法参数传递，传递的参数是数组内存的地址。</li>
<li>数组作为方法的返回值，返回的是数组的内存地址 </li>
</ul>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200508154026781.png" alt="image-20200508154026781"></p>
<h5 id="增强型for循环（用于遍历）"><a href="#增强型for循环（用于遍历）" class="headerlink" title="增强型for循环（用于遍历）"></a>增强型for循环（用于遍历）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> values [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">//常规遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> each = values[i];</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="comment">//增强型for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*增强型for循环只能取值，不能修改数组值  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用增强型for循环找出最大的那个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> values [] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">18</span>,<span class="number">62</span>,<span class="number">68</span>,<span class="number">82</span>,<span class="number">65</span>,<span class="number">9</span>&#125;; </span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> each : values) &#123;</span><br><span class="line">            <span class="keyword">if</span>(each&gt;max)</span><br><span class="line">                max = each;</span><br><span class="line">        &#125;         </span><br><span class="line">        System.out.println(<span class="string">"最大的一个值是:"</span>+max);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<hr>
<h4 id="方法调用的三种形式"><a href="#方法调用的三种形式" class="headerlink" title="方法调用的三种形式"></a>方法调用的三种形式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接写方法名调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    print(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"方法被调用"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; <span class="keyword">int</span> sum = getSum(<span class="number">5</span>,<span class="number">6</span>); System.out.println(sum); &#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出语句调用：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(getSum(<span class="number">5</span>,<span class="number">6</span>)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不能用输出语句调用 void 类型的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(printHello());<span class="comment">// 错误，不能输出语句调用void类型方法 </span></span><br><span class="line">&#125;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法重载（overload）"><a href="#方法重载（overload）" class="headerlink" title="方法重载（overload）"></a>方法重载（overload）</h5><ul>
<li>指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返 </li>
</ul>
<p>回值类型无关。</p>
<ul>
<li>参数列表：个数不同，数据类型不同，顺序不同。 </li>
<li>重载方法调用：JVM通过方法的参数列表，调用不同的方法。 </li>
</ul>
<h4 id="内存划分5部分"><a href="#内存划分5部分" class="headerlink" title="内存划分5部分"></a>内存划分5部分</h4><p>栈stack：存储方法内的局部变量</p>
<p>​                作用域：一旦超出作用域，立刻从栈内存消失</p>
<p>堆内存：heap</p>
<p>​                但是new出来的；</p>
<h5 id="-1"><a href="#-1" class="headerlink" title></a><img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200508143616397.png" alt="image-20200508143616397" style="zoom:150%;"></h5><hr>
<h3 id="2面向对象"><a href="#2面向对象" class="headerlink" title="2面向对象"></a>2面向对象</h3><h4 id="2-1类"><a href="#2-1类" class="headerlink" title="2.1类"></a>2.1类</h4><ul>
<li>成员变量直接定义在类中，方法外；</li>
<li><strong>成员方法去掉static关键字</strong>；</li>
</ul>
<h5 id="2-2枚举类型"><a href="#2-2枚举类型" class="headerlink" title="2.2枚举类型"></a>2.2枚举类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(Season value:Season.values())&#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="2-2对象"><a href="#2-2对象" class="headerlink" title="2.2对象"></a>2.2对象</h4><ul>
<li><strong>创建：：</strong>类名 对象名 = new 类名(); </li>
<li><strong>访问类中成员：：</strong>对象名.成员变量； 对象名.成员方法()； </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123; </span><br><span class="line">    <span class="comment">//成员变量 </span></span><br><span class="line">    String name；<span class="comment">//姓名 </span></span><br><span class="line">        <span class="keyword">int</span> age；<span class="comment">//年龄</span></span><br><span class="line"> 		<span class="comment">//成员方法 </span></span><br><span class="line">        <span class="comment">//学习的方法 </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"好好学习，天天向上"</span>);&#125;</span><br><span class="line">    	<span class="comment">//吃饭的方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"学习饿了要吃饭"</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01_Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//创建对象格式：类名 对象名 = new 类名(); </span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(); </span><br><span class="line">        System.out.println(<span class="string">"s:"</span>+s); <span class="comment">//cn.itcast.Student@100363 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+s.name); <span class="comment">//null </span></span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+s.age); <span class="comment">//0 </span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给成员变量赋值 </span></span><br><span class="line">        s.name = <span class="string">"赵丽颖"</span>; </span><br><span class="line">        s.age = <span class="number">18</span>; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//再次输出成员变量的值 </span></span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+s.name); <span class="comment">//赵丽颖 </span></span><br><span class="line">        System.out.println(<span class="string">"年龄："</span>+s.age); <span class="comment">//18 </span></span><br><span class="line">        System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐"</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用成员方法 </span></span><br><span class="line">        s.study(); <span class="comment">// "好好学习，天天向上" </span></span><br><span class="line">        s.eat(); <span class="comment">// "学习饿了要吃饭" </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-1成员变量的默认值"><a href="#2-2-1成员变量的默认值" class="headerlink" title="2.2.1成员变量的默认值"></a>2.2.1成员变量的默认值</h5><table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>整数：int byte  short long</td>
<td>0</td>
</tr>
<tr>
<td>浮点数：float double</td>
<td>0.0</td>
</tr>
<tr>
<td>字符型：char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
<tr>
<td>数组、类、接口</td>
<td>null</td>
</tr>
</tbody></table>
<h5 id="2-2-2-成员变量的初始化"><a href="#2-2-2-成员变量的初始化" class="headerlink" title="2.2.2 成员变量的初始化"></a>2.2.2 成员变量的初始化</h5><ul>
<li>声明该属性的时候初始化</li>
<li>构造方法中初始化</li>
<li>初始化块 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classChuShiHua</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"some hero"</span>;				 <span class="comment">//声明该属性的时候初始化</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;									<span class="comment">//为初始化，则为默认值</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        maxHP=(<span class="keyword">float</span>)<span class="number">1.1</span>;							<span class="comment">//分步的话，必须有代码块</span></span><br><span class="line">    &#125;												<span class="comment">//代码快前若有static 报错</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">classChuShiHua</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	hp=<span class="number">100</span>;										<span class="comment">//构造方法中初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        classChuShiHua a=<span class="keyword">new</span> classChuShiHua();</span><br><span class="line">        System.out.println(a.maxHP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">对象属性的初始化有三种方式顺序讨论</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name =Hero.getName(<span class="string">"属性声明"</span>) ;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = Hero.getName(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        name =getName(<span class="string">"初始化块"</span>);  <span class="comment">//每新建一个对象初始化块都执行一次；</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String pos)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name "</span>+pos);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">   name 属性声明</span><br><span class="line">   name 初始化块</span><br><span class="line">   name 构造方法</span><br></pre></td></tr></table></figure>

<h6 id="2-2-2-1-类成员的初始化"><a href="#2-2-2-1-类成员的初始化" class="headerlink" title="2.2.2.1 类成员的初始化"></a>2.2.2.1 类成员的初始化</h6><ul>
<li><p>声明该属性的时候初始化</p>
</li>
<li><p>静态初始化块  <strong>只执行一次</strong>。用于静态属性初始化；</p>
<p><strong>先执行父类初始化块 在执行子类初始化块；块内不能调用普通成员变量，因为没有对象</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">classChuShiHua</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">float</span> maxHP;</span><br><span class="line">    <span class="comment">//物品栏的容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> itemCapacity=<span class="number">8</span>; <span class="comment">//声明的时候 初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        itemCapacity = <span class="number">6</span>;<span class="comment">//静态初始化块 初始化  去掉static，则结果为8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">classChuShiHua</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(classChuShiHua.itemCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200508161106709.png" alt="image-20200508161106709"></p>
<h6 id="2-2-1-2局部变量与成员变量的区别"><a href="#2-2-1-2局部变量与成员变量的区别" class="headerlink" title="2.2.1.2局部变量与成员变量的区别"></a>2.2.1.2局部变量与成员变量的区别</h6><ul>
<li><input disabled type="checkbox"> 默认值不同；</li>
<li><input disabled type="checkbox"> 内存位置不同；</li>
<li><input disabled type="checkbox"> 类中的位置和作用范围、生命周期不同</li>
</ul>
<h4 id="2-3-单例对象"><a href="#2-3-单例对象" class="headerlink" title="2.3 单例对象"></a>2.3 单例对象</h4><p> 总共七种：</p>
<p>一、饿汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个？？？？？？</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance = <span class="keyword">new</span> GiantDragon();   </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取定义的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();</span></span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象</span></span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();  </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>二、懒汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例模式与饿汉式单例模式不同，只有在调用getInstance的时候，才会创建实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GiantDragon</span> </span>&#123; </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GiantDragon</span><span class="params">()</span></span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;      </span><br><span class="line">    <span class="comment">//public static 方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> GiantDragon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 instance指向的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGiantDragon</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();        </span></span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象     </span></span><br><span class="line">        GiantDragon g1 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g2 = GiantDragon.getInstance();</span><br><span class="line">        GiantDragon g3 = GiantDragon.getInstance();       </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较</p>
<ul>
<li><strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。 </li>
<li><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。 并且有<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793" target="_blank" rel="noopener">线程安全</a>的考量(鉴于同学们学习的进度，暂时不对线程的章节做展开)。<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</li>
</ul>
<h4 id="2-4面向对象的三大特征"><a href="#2-4面向对象的三大特征" class="headerlink" title="2.4面向对象的三大特征"></a>2.4面向对象的三大特征</h4><h5 id="2-4-1封装"><a href="#2-4-1封装" class="headerlink" title="2.4.1封装"></a>2.4.1封装</h5><ul>
<li><p>private；getXxx;  setXxx;</p>
</li>
<li><p>boolean: <strong>setBool; isBool;</strong></p>
</li>
<li><p>封装优化1：this；</p>
</li>
<li><p>封装优化：构造方法；</p>
<p>​                    public 类名 (参数列表){}；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;							<span class="comment">//无参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;		<span class="comment">//有参</span></span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> male;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMale</span><span class="params">(<span class="keyword">boolean</span> male)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.male=male;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMale</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> male;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义类的标准形式如下：</span></span><br><span class="line"><span class="comment">//1、所有成员变量private</span></span><br><span class="line"><span class="comment">//2、为成员变量定义get set方法</span></span><br><span class="line"><span class="comment">//3、无参构造方法</span></span><br><span class="line"><span class="comment">//4、有参构造方法</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="2-4-1-1private-注意事项"><a href="#2-4-1-1private-注意事项" class="headerlink" title="2.4.1.1private 注意事项"></a>2.4.1.1private 注意事项</h6><h5 id="2-4-2-继承-后面章节"><a href="#2-4-2-继承-后面章节" class="headerlink" title="2.4.2 继承(后面章节)"></a>2.4.2 继承(后面章节)</h5><h5 id="2-4-3-多态"><a href="#2-4-3-多态" class="headerlink" title="2.4.3 多态"></a>2.4.3 多态</h5><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200512152436149.png" alt="image-20200512152436149"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫一声"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a=<span class="keyword">new</span> Animal();			<span class="comment">// 重写的继承方法：根据等号对象判断</span></span><br><span class="line">        jiao(a);						<span class="comment">//非继承，类自有方法，根据引用类型判断</span></span><br><span class="line">        </span><br><span class="line">        								<span class="comment">//类型转换,调用特有方法</span></span><br><span class="line">        </span><br><span class="line">        Dog d =<span class="keyword">new</span> Dog();				<span class="comment">//向下强制数据类型转型：必须有继承关系，不然报错</span></span><br><span class="line">        jiao(d);						<span class="comment">//向下转型可以用instanceof判断</span></span><br><span class="line">        </span><br><span class="line">        Cat c=<span class="keyword">new</span> Cat();</span><br><span class="line">        jiao(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jiao</span><span class="params">(Animal b)</span></span>&#123;					<span class="comment">//父类引用指向子类对象；</span></span><br><span class="line">        b.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123; <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 向上转型 </span></span><br><span class="line">    Animal a = <span class="keyword">new</span> Cat(); </span><br><span class="line">    a.eat(); <span class="comment">// 调用的是 Cat 的 eat </span></span><br><span class="line">    <span class="comment">// 向下转型 </span></span><br><span class="line">    <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123; </span><br><span class="line">        Cat c = (Cat)a; </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse </span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123; </span><br><span class="line">        Dog d = (Dog)a; </span><br><span class="line">        d.watchHouse(); <span class="comment">// 调用的是 Dog 的 watchHouse </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure>



<h6 id="2-4-3-2对象的转型"><a href="#2-4-3-2对象的转型" class="headerlink" title="2.4.3.2对象的转型"></a>2.4.3.2对象的转型</h6><p>**</p>
<hr>
<h3 id="3、API"><a href="#3、API" class="headerlink" title="3、API"></a>3、API</h3><h4 id="3-1、Scanner"><a href="#3-1、Scanner" class="headerlink" title="3.1、Scanner"></a>3.1、Scanner</h4><ul>
<li><input disabled type="checkbox"> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法：</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in)&#123;&#125;;<span class="comment">//System.in &#123;&#125;</span></span><br><span class="line">        <span class="comment">//接受数据</span></span><br><span class="line">        <span class="keyword">int</span> i = sc.nextInt(<span class="number">10</span>);					<span class="comment">//sc.nextLine()字符串</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2、Random"><a href="#3-2、Random" class="headerlink" title="3.2、Random"></a>3.2、Random</h4><ul>
<li><input disabled type="checkbox"> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demoRandom</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String()</span> args)</span>&#123;</span><br><span class="line">            Random r =<span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">int</span> i = r.nextInt(<span class="number">10</span>)+<span class="number">1</span>;    			</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-3、ArrayList"><a href="#3-3、ArrayList" class="headerlink" title="3.3、ArrayList"></a>3.3、ArrayList</h4><ul>
<li><input disabled type="checkbox"> </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aaa</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="number">13</span>,<span class="string">"lu"</span>,<span class="keyword">true</span>);			<span class="comment">//创建对象</span></span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="number">13</span>,<span class="string">"赵丽颖"</span>,<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();		<span class="comment">//创建集合</span></span><br><span class="line">        list.add(s1);									<span class="comment">//要在main函数里，添加对象</span></span><br><span class="line">        list.add(s2);																</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;			<span class="comment">//遍历集合，集合get()提取来遍历</span></span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.isMale());</span><br><span class="line">            System.out.println(s.getAge());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//常用方法 list.size()  list.remove(i)  list.add(s1)</span></span><br></pre></td></tr></table></figure>



<p><E>范型只能是引用类型 不能是基本类型（若需要基本类型，需要包装类 位于java.lang包下）</E></p>
<table>
<thead>
<tr>
<th>byte</th>
<th>Byte</th>
<th>float</th>
<th>Float</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>Short</td>
<td>double</td>
<td>Doule</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h4 id="3-4、String"><a href="#3-4、String" class="headerlink" title="3.4、String"></a>3.4、String</h4><ul>
<li><input disabled type="checkbox"> String</li>
<li><input disabled type="checkbox"> </li>
</ul>
<h3 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h3><h4 id="4-1-继承的格式"><a href="#4-1-继承的格式" class="headerlink" title="4.1 继承的格式"></a>4.1 继承的格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//子类的方法可以用父类的非私有变量；若重名，super.父类变量,this.子类变量</span></span><br><span class="line"><span class="comment">//父类中的私有变量若进行访问，照样getXxx,setXxx;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="comment">//不重名，调用时现在子类找，若无再在父类找</span></span><br><span class="line"><span class="comment">//重名(返回类型、方法名、参数列表相同)-&gt;&gt;方法重写-&gt;&gt;只执行重写后的方法</span></span><br><span class="line"><span class="comment">//子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</span></span><br><span class="line"><span class="comment">//public&gt;protected &gt; (default) &gt; private</span></span><br><span class="line"><span class="comment">//子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*构造方法</span></span><br><span class="line"><span class="comment">构造方法与类名一致，以子类是无法继承；构造方法用于初始化成员变量；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money=<span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电话号码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">phone</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function">publiv <span class="title">phone</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************************************************************/</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">newPhone</span> <span class="keyword">extends</span> <span class="title">phone</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> money=<span class="number">7</span>;									<span class="comment">//super 调用父类成员变量</span></span><br><span class="line">/---------------------------------------------------------------------/</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.shouNum();							<span class="comment">//super 调用父类成员方法</span></span><br><span class="line">         System.out.println(<span class="string">"电话号"</span>);</span><br><span class="line">         System.out.println(<span class="string">"个人头像"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    			 	</span><br><span class="line">/-----------------------------------------------------------------------/  </span><br><span class="line">     <span class="comment">//调用父类构造方法</span></span><br><span class="line">     <span class="comment">//调用父类重载构造方法(每一个构造函数中super只能有一个，必须是子类构造方法的第一个语句！！！)</span></span><br><span class="line">    <span class="comment">//子类的构造函数一定会先执行父类中的构造函数；</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">newPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//默认有个super()</span></span><br><span class="line">&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">newPhone</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">   	<span class="keyword">super</span>(<span class="keyword">int</span> a) ;   </span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************************************************************/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">phonemedo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        newPhone p = <span class="keyword">new</span> newPhone()&#123;&#125;;</span><br><span class="line">        p.shouNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200509163357404.png" alt="image-20200509163357404"></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200512214341451.png" alt="image-20200512214341451"></p>
<h5 id="this的用法"><a href="#this的用法" class="headerlink" title="this的用法"></a>this的用法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*访问成员</span></span><br><span class="line"><span class="comment">this.成员变量 ‐‐ 本类的 </span></span><br><span class="line"><span class="comment">super.成员变量 ‐‐ 父类的 </span></span><br><span class="line"><span class="comment">this.成员方法名() ‐‐ 本类的 </span></span><br><span class="line"><span class="comment">super.成员方法名() ‐‐ 父类的*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">        String name; <span class="comment">//姓名</span></span><br><span class="line">        <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line">        <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line">        <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line">        <span class="comment">//带一个参数的构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"一个参数的构造方法"</span>);</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//带两个参数的构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(name);</span><br><span class="line">            System.out.println(<span class="string">"两个参数的构造方法"</span>);</span><br><span class="line">            <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp,<span class="keyword">int</span> V)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name,hp);</span><br><span class="line">        System.out.println(<span class="string">"3个参数的构造方法"</span>);</span><br><span class="line">        moveSpeed = V;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(teemo.name+teemo.hp+teemo.moveSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*访问构造方法</span></span><br><span class="line"><span class="comment">this(...) ‐‐ 本类的构造方法 </span></span><br><span class="line"><span class="comment">super(...) ‐‐ 父类的构造方法</span></span><br><span class="line"><span class="comment">子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</span></span><br><span class="line"><span class="comment">super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h5><ul>
<li><p>一个类只能有一个父类，不可以有多个父类</p>
</li>
<li><p>Java支持多层继承(继承体系)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A&#123;&#125; 					&#x2F;&#x2F;顶层父类是Object类。</span><br><span class="line">class B extends A&#123;&#125; </span><br><span class="line">class C extends B&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>​    </p>
<hr>
<h3 id="5、抽象"><a href="#5、抽象" class="headerlink" title="5、抽象"></a>5、抽象</h3><h5 id="5-1-格式"><a href="#5-1-格式" class="headerlink" title="5.1 格式"></a>5.1 格式</h5><p>​    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象的父类中的抽象成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>; <span class="comment">//多abstract 去掉大括号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//非抽象成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须子类去继承抽象类</span></span><br><span class="line"><span class="comment">//子类必须覆盖重写父类中的所有抽象成员方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>)；</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat(); 		<span class="comment">//抽象类中的构造，不能直接new，需要子类Cat继承后再new</span></span><br><span class="line">        cat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-注意事项"><a href="#5-2-注意事项" class="headerlink" title="5.2 注意事项"></a>5.2 注意事项</h5><h6 id="5-2-1static"><a href="#5-2-1static" class="headerlink" title="5.2.1static"></a>5.2.1static</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">//实例属性，对象属性，非静态属性</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">static</span> String copyright;<span class="comment">//类属性,静态属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">"盖伦"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(garen.name);</span><br><span class="line">        System.out.println(garen.copyright);				<span class="comment">//未初始化 所以为null</span></span><br><span class="line"></span><br><span class="line">        Hero.copyright = <span class="string">"版权由Riot Games公司所有"</span>;</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">"提莫"</span>;</span><br><span class="line">        System.out.println(teemo.name);</span><br><span class="line">        System.out.println(teemo.copyright);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在一个类方法中，不能直接调用一个对象方法 ，因为对象方法一定要有对象，然后对象名.方法名字，而静态方法不用对象；</li>
</ul>
<p><strong>应用于自动编号！</strong></p>
<ul>
<li><strong>static修饰成员变量</strong>时，该变量是公共的 具体对象.该变量，会改变所有的，最好用类.变量去更改</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       (<span class="keyword">new</span> Person(<span class="number">122</span>,<span class="string">"zhangsan"</span>)).country=<span class="string">"中华人民共和国"</span>；<span class="comment">//某个对象的全局属性改变，全部对象都变；</span></span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> clsaa <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">static</span> String country;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Class</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Class</span><span class="params">(<span class="keyword">int</span> age,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>static修饰方法</strong></li>
</ul>
<p>static方法只能调用static属性和static方法；非static方法允许调用static属性和static方法；</p>
<p>static方法中不能有this，因为没有实例化对象；</p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200523214756159.png" alt="image-20200523214756159" style="zoom:50%;">

<p><strong>注意其中this的用法；</strong></p>
<h3 id="6、接口"><a href="#6、接口" class="headerlink" title="6、接口"></a>6、接口</h3><ul>
<li><p>是引用数据类型</p>
</li>
<li><p>接口格式</p>
<p>public interface 借口名称 {</p>
<p>}</p>
</li>
<li><p>包含的内容：常量；抽象方法；默认方法；静态方法；私有方法；</p>
<ul>
<li><input disabled type="checkbox"> 抽象方法</li>
</ul>
</li>
</ul>
<p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1Scanner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  	Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    String str=sc.next();						<span class="comment">//输入字符型</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">int</span> sum=sc.nextInt();						<span class="comment">//输入整型</span></span><br><span class="line">    System.out.println(sum);</span><br><span class="line">	&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<ul>
<li>一个匿名对象，只能使用一次。以下是两个对象；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure>

<p>匿名对象作为参数：</p>
<p>​                </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2Scanner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> num= <span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">       System.out.println(<span class="string">"输入的是："</span>+num);  </span><br><span class="line">     <span class="comment">//一般写法</span></span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    methodParam(sc);</span><br><span class="line">    <span class="comment">//匿名引用</span></span><br><span class="line">    methodParam(<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodParam</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Scanner().nextInt); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名对象还可作为返回值：</p>
<h4 id="对象数组："><a href="#对象数组：" class="headerlink" title="对象数组："></a>对象数组：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>String</strong></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200509135639331.png" alt="image-20200509135639331"></p>
<h4 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h4><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200509150316211.png" alt="image-20200509150316211"></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200509151440310.png" alt="image-20200509151440310"></p>
<h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200509152717995.png" alt="image-20200509152717995"></p>
<h3 id="7、Final"><a href="#7、Final" class="headerlink" title="7、Final"></a>7、Final</h3><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200513114824809.png" alt="image-20200513114824809"></p>
<img data-src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200513115230026.png" alt="image-20200513115230026" style="zoom:67%;">

<p>​                    final类的方法不能覆盖重写，因为不能被继承 </p>
<p>2final修饰方法</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200513123923805.png" alt="image-20200513123923805"></p>
<p>​        能有子类</p>
<ul>
<li>对于类和方法 abstract和final 矛盾 不能同时使用</li>
</ul>
<p>3final修饰局部变量</p>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>继承-&gt;&gt;方法重写-&gt;&gt;父类引用指向子类对象；此外，接口的实现也可以多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫一声"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">ani</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"animal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a=<span class="keyword">new</span> Cat();</span><br><span class="line">        a.shout();   <span class="comment">//a自动向上转型 对于其他方法只能调用a内的，而重写方法调用=号右侧对象的方法</span></span><br><span class="line">        a.ani();		<span class="comment">//向下转型需要强转；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//喵~</span></span><br><span class="line"><span class="comment">//animal</span></span><br></pre></td></tr></table></figure>



<h3 id="8、内部类"><a href="#8、内部类" class="headerlink" title="8、内部类"></a>8、内部类</h3><h4 id="8-1分类"><a href="#8-1分类" class="headerlink" title="8.1分类"></a>8.1分类</h4><ul>
<li><p>成员内部类</p>
<p>定义格式：    </p>
<p>修饰符 class 外部类名称{</p>
<p>​        修饰符 class 内部类名称{</p>
<p>}</p>
<p>内用外，随意访问，即便是外部私有。外用内，需要内部对象引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>局部内部类(包括匿名内部类)</li>
</ul>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200513135432308.png" alt="image-20200513135432308"></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200513135950991.png" alt="image-20200513135950991"></p>
<h4 id="8-3局部内部类中的匿名内部类（lambda表达式的基础）"><a href="#8-3局部内部类中的匿名内部类（lambda表达式的基础）" class="headerlink" title="8.3局部内部类中的匿名内部类（lambda表达式的基础）"></a>8.3局部内部类中的匿名内部类（lambda表达式的基础）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterFace</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">fangfa</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的实现类只用一次</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">void</span> <span class="title">main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyInterface obj =<span class="keyword">new</span> MyInterface()&#123;				<span class="comment">//接口作为抽象类，本不可以new对象</span></span><br><span class="line">          	<span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现接口的重写方法！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;						<span class="comment">//分号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li><p>new 接口名称(){…}   接口名称是匿名内部类需要实现哪个接口</p>
<p>​                                     {…} 匿名内部类的内容</p>
</li>
<li><p>1、适用于实现类只用一次； </p>
<p>2、匿名内部类作为匿名对象时</p>
<p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> MyInterface()&#123;				</span><br><span class="line">          	<span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fangfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现接口的重写方法！"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;.fangfa();			<span class="comment">//但是匿名对象的方法只能用一个且一次</span></span><br></pre></td></tr></table></figure>

<p>3、匿名内部类 省略了实现类 ；匿名对象省略了对象名称；</p>
</li>
</ul>
<p>8.4、类作为成员变量</p>
<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Fu()&#123;</span><br><span class="line">	private String name;    &#x2F;&#x2F;String 本质是一种类；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h3 id="9、重写object的equal方法"><a href="#9、重写object的equal方法" class="headerlink" title="9、重写object的equal方法"></a>9、重写object的equal方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>    <span class="comment">//alt+enter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//getClass() != o.getClass()使用反射技术，判断o是否为person类型，等同于o instanceof person</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        person person = (person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Objects.equals    可以容忍空指针异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name=<span class="keyword">null</span>    ;</span><br><span class="line">        String banji=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">boolean</span> b = Objects.equals(name, banji);		<span class="comment">//要在main方法下调用？？</span></span><br><span class="line">        System.out.println(b);		<span class="comment">//快捷键 Objects.equals(name, banji)。var</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="10、日期时间类"><a href="#10、日期时间类" class="headerlink" title="10、日期时间类"></a>10、日期时间类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Date date =<span class="keyword">new</span> Date();           <span class="comment">//构造实质上是Date型毫秒数，其实print把它tostring</span></span><br><span class="line">       System.out.println(date);           <span class="comment">//tostringThu May 14 14:48:54 CST 2020</span></span><br><span class="line">       Date time=<span class="keyword">new</span> Date(<span class="number">1589427125275L</span>);<span class="comment">//long型、构造</span></span><br><span class="line">       System.out.println(time);        <span class="comment">//print中tostringThu May 14 14:48:54 CST 2020</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> currT = System.currentTimeMillis();</span><br><span class="line">       System.out.println(currT);             <span class="comment">//1589438934925</span></span><br><span class="line">       Long l=date.getTime();          	<span class="comment">//成员</span></span><br><span class="line">       System.out.println(l);              <span class="comment">//1589438934869</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   	 DateFormat fd=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy年MM月dd日"</span>);</span><br><span class="line">      	 Date sss = fd.parse(<span class="string">"92年11月18日"</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(((currentTime.getTime()-sss.getTime())/<span class="number">1000</span>/<span class="number">3600</span>/<span class="number">24</span>/<span class="number">365</span>)+<span class="string">"天"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>Date 类</p>
<ul>
<li><strong>构造方法：</strong>public Date(){} 是毫秒数;public Date(Long型)</li>
<li><strong>成员方法：</strong>Date型对象.getTime()  返回的是long型</li>
</ul>
<p><strong>Dateformat 类是抽象类  他的子类SimpleDateFormate类 包含下面两个方法：</strong></p>
<ul>
<li><p><strong>String</strong> time_a=new.SimpleDateformat(“yy年MM月dd日”).format(long 型) :</p>
</li>
<li><p><strong>Date</strong> time_b=new.SimpleDateformat(“yy年MM月dd日”).parse(“2018年12月11日    “)</p>
</li>
</ul>
<hr>
<p>Stringbuilder()</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200514155730814.png" alt="image-20200514155730814"></p>
<p>对象名.append()</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200514155548037.png" alt="image-20200514155548037"></p>
<p>toString()</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200514155944394.png" alt="image-20200514155944394"></p>
<h3 id="基本功项目训练"><a href="#基本功项目训练" class="headerlink" title="基本功项目训练"></a>基本功项目训练</h3><hr>
<h3 id="二、数据结构和算法"><a href="#二、数据结构和算法" class="headerlink" title="二、数据结构和算法"></a><strong>二、数据结构和算法</strong></h3><ul>
<li>几大基础数据结构类型得烂熟于心，比如：<strong>字符串</strong>、<strong>链表</strong>、<strong>二叉树</strong>、<strong>栈</strong>、<strong>队列</strong>等等；基本的几大算法要了如指掌，比如<strong>查找</strong>、<strong>排序</strong>、<strong>动态规划</strong>等等。 </li>
</ul>
<hr>
<h3 id="三、TCP-IP协议栈"><a href="#三、TCP-IP协议栈" class="headerlink" title="三、TCP/IP协议栈"></a><strong>三、TCP/IP协议栈</strong></h3><ul>
<li>TCP/IP协议栈可以说是当下互联网通信的基石，无论如何一定要对TCP/IP的协议栈了如指掌，包括：<strong>ARP协议</strong>、<strong>IP协议</strong>、<strong>ICMP协议</strong>、<strong>TCP和UDP协议</strong>、<strong>DNS协议</strong>、<strong>HTTP协议</strong>、<strong>HTTPS协议</strong>等等 </li>
</ul>
<p>数据链路层：以太网帧的格式;mtu</p>
<h2 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h2><ul>
<li>概述</li>
</ul>
<ul>
<li>链路网</li>
<li>ip：国际协议</li>
</ul>
<h2 id="DAY2"><a href="#DAY2" class="headerlink" title="DAY2"></a>DAY2</h2><ul>
<li>ARP</li>
<li>ICMP</li>
<li>PING</li>
<li>Traceroute</li>
<li>IP选路</li>
</ul>
<h2 id="DAY3"><a href="#DAY3" class="headerlink" title="DAY3"></a>DAY3</h2><ul>
<li>UDP</li>
<li>广播与多播</li>
<li>DNS</li>
<li>TFTP</li>
</ul>
<h2 id="DAY4-5"><a href="#DAY4-5" class="headerlink" title="DAY4\5"></a>DAY4\5</h2><ul>
<li>TCP</li>
</ul>
<h2 id="DAY6"><a href="#DAY6" class="headerlink" title="DAY6"></a>DAY6</h2><ul>
<li>应用层</li>
</ul>
<hr>
<h3 id="四、设计模式"><a href="#四、设计模式" class="headerlink" title="四、设计模式"></a><strong>四、设计模式</strong></h3><ul>
<li>倒不需要23种设计模式全部很熟悉，常见的几个，比如：<strong>单例模式</strong>、<strong>工厂模式</strong>、<strong>代理模式</strong>、<strong>策略模式</strong>、<strong>模板方法模式</strong>等几个熟练于心即可 </li>
</ul>
<h3 id="五、数据库和SQL"><a href="#五、数据库和SQL" class="headerlink" title="五、数据库和SQL"></a><strong>五、数据库和SQL</strong></h3><ul>
<li>数据库基本原理了解，SQL语句熟练书写，常见的优化方式熟悉 </li>
</ul>
<h3 id="六、操作系统"><a href="#六、操作系统" class="headerlink" title="六、操作系统"></a><strong>六、操作系统</strong></h3><ul>
<li>该部分重点包括：进程和线程的相关原理（原子性、并发、锁）、内存相关原理（内存分布、内存调度）等 </li>
</ul>
<hr>
<ul>
<li><p>2、</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>“tags”</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven学习笔记</title>
    <url>/2020/06/02/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、Maven的作用"><a href="#一、Maven的作用" class="headerlink" title="一、Maven的作用"></a>一、Maven的作用</h1><ul>
<li>maven可以管理jar包</li>
<li>自动下载jar和源代码</li>
<li>管理jar包的依赖</li>
<li>管理需要的jar版本</li>
<li>编译程序，java文件编译为class文件</li>
<li>测试代码是否正确</li>
<li>打包文档成jar或war文件</li>
<li>部署项目</li>
</ul>
<h1 id="二、构建"><a href="#二、构建" class="headerlink" title="二、构建"></a>二、构建</h1><p>项目的构建是面向过程的：编译、测试、运行、打包、部署等；</p>
<p>maven支持的构建：</p>
<pre><code>- 清理；删掉之前的编译
- 编译：批量编译源代码
- 测试：可批量执行测试程序代码，同时测试很多功能
- 报告：生成测试结果报告
- 打包：把项目中所有的class文件，配置文件等所有资源放到压缩文件中；
- 安装：把上一步中的jar war文件 安装到本地仓库；
- 部署：把程序安装好可以执行</code></pre><h1 id="三、Maven核心概念"><a href="#三、Maven核心概念" class="headerlink" title="三、Maven核心概念"></a>三、Maven核心概念</h1><ul>
<li>POM</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span> 		//maven模型的版本，现在只能是4.0.0</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.e groupId&gt;		//任意字符串；组织ID 一般是唯一的，是公司域名+项目名的倒写</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>//指定项目名字 对应上面id中的项目名</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span> 	//项目的版本号，如果还在开发，通常在版本后加SNAPSHOT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>约定</strong>的目录结构</p>
</li>
<li><p>坐标</p>
<p>  <groupId>   <artifactId>  <version> 总称为坐标（唯一的标识）</version></artifactId></groupId></p>
</li>
<li><p>依赖管理</p>
</li>
<li><p>仓库管理</p>
</li>
</ul>
<p>仓库：jar包的下载不需要认为操作</p>
<ul>
<li><p>存放jar  </p>
<ul>
<li>包括maven使用的插件（各种jar包）</li>
<li>项目使用的jar（第三方工具）</li>
</ul>
</li>
<li><p>分类</p>
<ul>
<li>本地仓库</li>
<li><a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">中央仓库</a></li>
<li>中央仓库的镜像</li>
<li>私服，公司内部的局域网服务器；</li>
</ul>
</li>
<li><p>生命周期</p>
</li>
<li><p>插件和目标</p>
</li>
<li><p>继承</p>
</li>
<li><p>聚合</p>
</li>
</ul>
<h1 id="四、Maven的安装和配置"><a href="#四、Maven的安装和配置" class="headerlink" title="四、Maven的安装和配置"></a>四、Maven的安装和配置</h1><h2 id="4-1-JDK1-8"><a href="#4-1-JDK1-8" class="headerlink" title="4.1 JDK1.8"></a>4.1 JDK1.8</h2><p>安装</p>
<ul>
<li><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a></li>
<li><a href="https://blog.csdn.net/weixin_37601546/article/details/88623530" target="_blank" rel="noopener">安装步骤</a></li>
<li>注意：安装过程会提示安装jre，无需安装，jdk中已经含有jre </li>
</ul>
<p>配置</p>
<ul>
<li>Java的环境变量需要配置三个：JAVA_HOME、Path、ClassPath </li>
<li>JAVA_HOME：它的作用是指向JDK的安装目录，Tomcat、Idea、Eclipse等软件就是通过它来找到并使用安装好的JDK </li>
<li>Path： 作用是指定命令搜索路径，在执行命令javac或java时，它会到Path变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把JDK安装目录下的bin目录增加到现有的Path变量中，bin目录中包含经常要用到的可执行文件javac、java、javadoc等，设置好Path变量后，就可以在任何目录下执行javac、java等命令</li>
<li>ClassPath：它的作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过ClassPath来寻找类的.class文件。我们需要把JDK安装目录下的lib子目录中的dt.jar和tools.jar设置到ClassPath中，当然，当前目录“.”也必须加入到该变量中</li>
</ul>
<h2 id="4-2Maven工具的安装和配置"><a href="#4-2Maven工具的安装和配置" class="headerlink" title="4.2Maven工具的安装和配置"></a>4.2Maven工具的安装和配置</h2><ul>
<li><p><a href="https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/" target="_blank" rel="noopener">下载地址</a></p>
</li>
<li><p>解压安装包</p>
<ul>
<li>bin： 执行程序</li>
<li>conf： maven工具本身的配置文件setting.xml</li>
</ul>
</li>
<li><p>配置环境变量</p>
<p>​    环境变量中，指定M2_HOME，value为bin之前的目录</p>
<p>​    path 中加入 %M2_HOME%\bin;</p>
</li>
</ul>
<p>cmd中：mvn -v测试安装。</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603110946585.png" alt="image-20200603110946585"></p>
<p>本地仓库：C:\Users\Lenovo.m2\repository</p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603111529125.png" alt="image-20200603111529125"></p>
<ul>
<li><ul>
<li></li>
</ul>
</li>
</ul>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603202025488.png" alt="image-20200603202025488"></p>
<p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200603205448637.png" alt="image-20200603205448637"></p>
<h1 id="五、Maven在IDEA中的应用"><a href="#五、Maven在IDEA中的应用" class="headerlink" title="五、Maven在IDEA中的应用"></a>五、Maven在IDEA中的应用</h1><h1 id="六、依赖管理"><a href="#六、依赖管理" class="headerlink" title="六、依赖管理"></a>六、依赖管理</h1><h1 id="七、常用设置"><a href="#七、常用设置" class="headerlink" title="七、常用设置"></a>七、常用设置</h1>]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Landset8图像处理和水体提取</title>
    <url>/2020/06/01/Landset8%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%92%8C%E6%B0%B4%E4%BD%93%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h2 id="一、图像处理整体思路步骤"><a href="#一、图像处理整体思路步骤" class="headerlink" title="一、图像处理整体思路步骤"></a>一、图像处理整体思路步骤</h2><h3 id="1、多光谱波段"><a href="#1、多光谱波段" class="headerlink" title="1、多光谱波段"></a>1、多光谱波段</h3><p><img data-src="buzhou.jpg" alt="avatar"></p>
<h4 id="1-1多光谱波段的辐射定标"><a href="#1-1多光谱波段的辐射定标" class="headerlink" title="1.1多光谱波段的辐射定标"></a>1.1多光谱波段的辐射定标</h4><h5 id="1-1-1-Envi导入Landset8影像"><a href="#1-1-1-Envi导入Landset8影像" class="headerlink" title="1.1.1 Envi导入Landset8影像"></a>1.1.1 Envi导入Landset8影像</h5><p><img data-src="%E5%AF%BC%E5%85%A5Landset8%E5%BD%B1%E5%83%8F.png" alt="avatar"></p>
<hr>
<p><strong>Landset8波段调整</strong></p>
<ul>
<li><p>OLI对波段进行了重新调整，比较大的调整是OLI Band5(0.845–0.885 μm)，排除了0.825μm处水汽吸收特征；</p>
</li>
<li><p>OLI全色波段Band8波段范围较窄，这种方式可以在全色图像上更好区分植被和无植被特征；</p>
</li>
<li><p>此外，还有两个新增的波段：蓝色波段 (band 1; 0.433–0.453 μm) 主要应用海岸带观测，短波红外波段(band 9; 1.360–1.390 μm) 包括水汽强吸收特征可用于云检测；</p>
</li>
<li><p>近红外band5和短波红外band9与MODIS对应的波段接近，详情参考表。</p>
</li>
</ul>
<hr>
<p><strong>波段组合</strong></p>
<p><img data-src="OLI%E6%B3%A2%E6%AE%B5%E7%BB%84%E5%90%88.png" alt="avatar"></p>
<p><img data-src="OLI%E6%B3%A2%E6%AE%B5%E7%BB%84%E5%90%88%E8%AF%B4%E6%98%8E.png" alt="avatar"></p>
<p><img data-src="OLI%E6%B3%A2%E6%AE%B5%E7%BB%84%E5%90%882.png" alt="avatar"></p>
<hr>
<p><strong>图像预处理</strong></p>
<p>由于Landsat数据已经经过几何校正和地形校正，所以<strong>直接进行</strong>辐射定标和大气校正。</p>
<hr>
<h5 id="1-1-2多光谱波段辐射定标"><a href="#1-1-2多光谱波段辐射定标" class="headerlink" title="1.1.2多光谱波段辐射定标"></a>1.1.2多光谱波段辐射定标</h5><ul>
<li>选择File-&gt;Open，选择_MTL.txt文件打开；</li>
<li>选择ToolBox/Radiometric Correction/Radiometric Calibration，选择多光谱数据（MultiSpectral）；</li>
<li>参数设置如下：</li>
</ul>
<p>​        定标类型（Calibration Type）：辐射亮度值（Radiance）；</p>
<p>​        输出储存顺序 （Output Interleave）：BIL；</p>
<p>​        输出数据类型：Float；</p>
<p>​        单击FLAASH Settings按钮，自动获取辐射亮度单位转换系数Scale Factor：0.1,其他选项是方便用于</p>
<p>​                FLAASH大气校正；</p>
<p>​        最后自行设置输出路径。</p>
<p><img data-src="%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE1.jpg" alt="avatar"></p>
<hr>
<h4 id="1-2多光谱波段的大气校正"><a href="#1-2多光谱波段的大气校正" class="headerlink" title="1.2多光谱波段的大气校正"></a>1.2多光谱波段的大气校正</h4><ul>
<li>打开Radiometric Correction </li>
<li>-&gt;Atmospheric Correction Module </li>
<li>-&gt; FLAASH Atmospheric Correction工具 </li>
<li>导入经过辐射定标的数据radiometric_result.dat，因为在辐射定标中已经进行了单位换算，所以在弹出的Radiance Scale Factors中选择第二项 </li>
</ul>
<img data-src="大气校正图片1.png" alt="avatar" style="zoom:50%;">

<p>由于FLAASH大气校正需要影像区域的平均高程，所以可以使用ENVI自带全球高程数据进行计算。</p>
<ul>
<li><p>File——Open World Data——Elevation,打开ENVI自带的全球900mDEM数据;</p>
</li>
<li><p>将需要计算高程数据的影像打开（需要带坐标信息），可以放大看到影像数据叠加在DEM数据上</p>
</li>
</ul>
<p>​    <img data-src="大气校正图片2.png" alt="avatar" style="zoom:67%;"></p>
<ul>
<li>打开工具箱中的Statistics——Compute Statistics,在输入文件对话框中选择GMTED2010.jp2数据，再单击Stats Subset，单击File，选择需要统计高程信息对应的图像，然后OK.</li>
</ul>
<p>​    <img data-src="大气校正图片3.png" alt="avatar" style="zoom: 67%;"></p>
<ul>
<li>之后的参数均设置为默认。最后得到统计的平均高程信息，可以看到影像平均高程为256.626m（下图）</li>
</ul>
<p>​        <img data-src="大气校正图片4.png" alt="avatar" style="zoom:67%;"></p>
<ul>
<li>随后回到FLAASH工具，设置其他参数。传感器类型Sensor Type为Landsat-8 OLI，平均地面高程Ground Elevation为0.256km，大气模型根据帮助文档中的<strong>大气模型表</strong>进行选择，根据影像成像时间为3月，影像中心纬度为34°确定大气模型为MLS。气溶胶模型选择城市Urban。</li>
</ul>
<p>​            <img data-src="大气校正图片5.png" alt="avatar" style="zoom: 67%;"></p>
<ul>
<li>设置的FLAASH参数、</li>
</ul>
<p>​        <img data-src="%E5%A4%A7%E6%B0%94%E6%A0%A1%E6%AD%A3%E5%9B%BE%E7%89%876.png" alt="avatar"></p>
<ul>
<li>同时还要设置多光谱参数，进入Multispectral Settings，将Default设置为Over-Land Retrieval Standard(600：2100)</li>
</ul>
<p>​    <img data-src="大气校正图片7.png" alt="avatar" style="zoom:67%;"></p>
<ul>
<li>其他参数按照默认设置，最后点击Apply进行大气校正。大气校正结果如图11所示，会显示估算能见度和平均水汽柱。</li>
</ul>
<p>FLAASH过程中出现“内存资源不足”的错误可以参考这篇博客：<a href="https://blog.csdn.net/weixin_43637490/article/details/105590237" target="_blank" rel="noopener">FLAASH大气校正过程中内存资源不足解决方法</a></p>
<ul>
<li>FLAASH大气校正结果</li>
</ul>
<p>​        <img data-src="%E5%A4%A7%E6%B0%94%E6%A0%A1%E6%AD%A3%E5%9B%BE%E7%89%878.png" alt="avatar"></p>
<hr>
<h3 id="2、全色波段"><a href="#2、全色波段" class="headerlink" title="2、全色波段"></a>2、全色波段</h3><h4 id="2-1全色波段的辐射定标"><a href="#2-1全色波段的辐射定标" class="headerlink" title="2.1全色波段的辐射定标"></a>2.1全色波段的辐射定标</h4><ul>
<li><p>选择ToolBox/Radiometric Correction/Radiometric Calibration，选择全色波段（Panchromatic）；</p>
</li>
<li><p>参数设置：</p>
<ul>
<li>Calibration Type：Reflectance，</li>
<li>Output Data Type：UInt，</li>
<li>Scale Factor:10000；</li>
</ul>
</li>
</ul>
<p><img data-src="%E5%85%A8%E8%89%B2%E6%B3%A2%E6%AE%B5%E5%9B%BE%E7%89%871.png" alt="avatar"></p>
<ul>
<li>点击OK输出</li>
</ul>
<hr>
<h3 id="3、图像融合"><a href="#3、图像融合" class="headerlink" title="3、图像融合"></a>3、图像融合</h3><ul>
<li>打开 ToolBox/ Image Sharpening /Gram-Schmidt Pan Sharpening</li>
<li>在文件选择框中分别选择第1.2步中大气校正之后多光谱数据作为低分辨率影像（Low Spatial）</li>
<li>在文件选择框中第2.1步中辐射定标后的全色数据作为高分辨率影像（High Spatial）</li>
<li>单击OK。打开Pan Sharpening Parameters面板</li>
<li>参数设置：<ul>
<li>Sensor：landsat-8 oli</li>
<li>重采样方法（Resampling）：Cubic Convolution</li>
<li>输出格式为：ENVI</li>
</ul>
</li>
</ul>
<p><img data-src="%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88%E5%9B%BE%E7%89%871.png" alt="avatar"></p>
<hr>
<h2 id="二、水体信息提取"><a href="#二、水体信息提取" class="headerlink" title="二、水体信息提取"></a>二、水体信息提取</h2>]]></content>
      <tags>
        <tag>NDWI</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2020/06/01/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p> — #安装Nodejs<br>node -v #查看node版本<br>npm -v #查看npm版本<br>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器<br>cnpm -v #查看cnpm版本<br>cnpm install -g hexo-cli #安装hexo框架<br>hexo -v #查看hexo版本<br>mkdir blog #创建blog目录<br>cd blog #进入blog目录<br>hexo init #生成博客 初始化博客</p>
<p> <img data-src="image-20200516170333761.png" alt="avatar"></p>
<p>hexo s #启动本地博客服务</p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516170405967.png" alt="image-20200516170405967"></p>
<p>本地启动用来预览</p>
<p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> #本地访问地址</p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516170447241.png" alt="image-20200516170447241"></p>
<p>hexo n “我的第一篇文章” #创建新的文章</p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516170732433.png" alt="image-20200516170732433">\</p>
<p>chdir#返回blog目录</p>
<p>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>-—<br>#配置_config.yml<br>-—-<br># Deployment<br>## Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a><br>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master<br>-—-<br>hexo d #部署到Github仓库里</p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516184925677.png" alt="image-20200516184925677"></p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516184942258.png" alt="image-20200516184942258"></p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516184955781.png" alt="image-20200516184955781"></p>
<p><a href="https://YourGithubName.github.io/" target="_blank" rel="noopener">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516185138387.png" alt="image-20200516185138387"></p>
<p>换主题</p>
<p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</p>
<p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p>
<p>hexo c #清理一下<br>hexo g #生成<br>hexo d #部署到远程Github仓库<br><a href="https://YourGithubName.github.io/" target="_blank" rel="noopener">https://YourGithubName.github.io/</a> #查看博客 </p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516165127207.png" alt="image-20200516165127207"></p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516165334247.png" alt="image-20200516165334247"></p>
<p><img data-src="D:%5Chexo_blog%5Csource_posts%5Chexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%5Cimage-20200516165325307.png" alt="image-20200516165325307"></p>
<h1 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h1><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p>
<p>注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p>
<p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。<br>————————————————<br>版权声明：本文为CSDN博主「zjufangzh」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/sinat_37781304/java/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/java/article/details/82729029</a></p>
<p>hext 基本配置</p>
<p> 在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方的配置</a>描述 </p>
<p> <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a> </p>
<hr>
<p>更改主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Sitoi&#x2F;Sitoi-blog.git themes&#x2F;文件名</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo nexT</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客nexT主题优化</title>
    <url>/2020/05/31/hexo%E5%8D%9A%E5%AE%A2nexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="hexo-主题-next7-8-版本配置美化"><a href="#hexo-主题-next7-8-版本配置美化" class="headerlink" title="hexo 主题 next7.8 版本配置美化"></a>hexo 主题 next7.8 版本配置美化</h1><p>网上next主题的配置大多为next5.+或next6.+，在最新版本中对之前的版![2](C:\Users\Lenovo\Pictures\Saved Pictures\2.jpg)本进行了高度的插件化，许多功能都集成在主题配置文件中，同时之前自定义样式配置文件的路径也有所改变，针对于此写下自己的配置记录</p>
<ul>
<li>设置博主文字描述和中文语言<ul>
<li>站点配置文件修改site</li>
</ul>
</li>
<li>设置next主题和主题样式</li>
<li>设置首页不显示全文</li>
<li>设置博客文章持久化连接<ul>
<li>安装hexo-abbrlink这个插件</li>
<li>站点配置文件修改permalink添加如下内容</li>
</ul>
</li>
<li>Menu增加关于、标签、分类页面<ul>
<li>站点配置文件修改menu</li>
<li>新建相关页面</li>
<li>修改生成页面的配置</li>
</ul>
</li>
<li>添加搜索功能<ul>
<li>安装hexo-generator-searchdb这个插件</li>
<li>站点配置文件添加并修改local_search</li>
</ul>
</li>
<li>设置背景图片和透明度<ul>
<li>修改主题配置文件中的custom_file_path</li>
<li>在博客主站目录下的source文件夹下新建_data文件夹并添加styles.styl文件</li>
<li>在styles.styl中添加如下内容</li>
</ul>
</li>
<li>设置canvas_ribbon动态背景<ul>
<li>进入到 NexT 主题目录下</li>
<li>安装模块到 source/lib 目录下</li>
<li>编辑主题配置文件，启用 canvas_ribbon 模块，如下：</li>
</ul>
</li>
<li>设置左上角或右上角 github 图标</li>
<li>设置侧栏阅读进度百分比</li>
<li>设置阅读位置标记功能<ul>
<li>进入到 NexT 主题目录下</li>
<li>安装模块到 source/lib 目录下：</li>
<li>编辑主题配置文件，启用 bookmark 模块，如下：</li>
</ul>
</li>
<li>设置字数统计和预计阅读时间<ul>
<li>进入到博客主站目录下，安装 Hexo 插件：</li>
<li>编辑站点配置文件，添加如下内容：</li>
<li>此插件集成在 NexT 主题中，在 Hexo 站点配置文件中启用插件后，你可以调整 NexT 配置中的选项，查看主题配置文件，配置如下：</li>
</ul>
</li>
<li>添加文章分享按钮<ul>
<li>进入到 NexT 主题目录下</li>
<li>安装模块到 source/lib 目录下：</li>
<li>编辑主题配置文件，添加 needmoreshare2 模块，如下：</li>
</ul>
</li>
<li>设置网页底部信息</li>
<li>网站底部添加网站运行时间<ul>
<li>修改主题下layout_partials\footer.swig，并添加内容如下：</li>
</ul>
</li>
<li>添加自定义404页面</li>
<li>添加图片放大预览功能</li>
<li>图片懒加载设置</li>
<li>点击出现桃心效果(可选)<ul>
<li>在主题/source/js/下新建文件 clicklove.js，添加内容如下</li>
<li>修改_layout.swig</li>
</ul>
</li>
<li>主页文章添加置顶图标(可选)</li>
<li>标签云特效（可选）</li>
<li>主页文章添加阴影效果</li>
<li>设置代码块复制和代码高亮</li>
<li>网站侧栏背景及主副标题颜色</li>
<li>修改文章内链接文本样式</li>
<li>修改文章底部标签样式</li>
<li>在文章末尾添加“文章结束”标记</li>
<li>修改分类页面样式</li>
<li>设置头像</li>
<li>网站底部加上访问量</li>
<li>修改不蒜子颜色</li>
<li>网站底部添加动态桃心</li>
<li>网站底部添加备案信息(可选)</li>
<li>侧边栏社交链接</li>
<li>添加侧栏友情链接</li>
<li>在文章底部增加版权信息</li>
<li>关于页面样式的修改,回顶部按钮样式、底部页码等等</li>
</ul>
<h1 id="设置博主文字描述和中文语言"><a href="#设置博主文字描述和中文语言" class="headerlink" title="设置博主文字描述和中文语言"></a>设置博主文字描述和中文语言</h1><h2 id="站点配置文件修改site"><a href="#站点配置文件修改site" class="headerlink" title="站点配置文件修改site"></a>站点配置文件修改site</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Kali</span><br><span class="line">   subtitle: IT博客</span><br><span class="line">   description: 没有目的，就做不成任何事情</span><br><span class="line">   keywords:</span><br><span class="line">   author: KaliAlbert</span><br><span class="line">   language: zh-CN</span><br><span class="line">   timezone: Asia&#x2F;Shanghai</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="设置next主题和主题样式"><a href="#设置next主题和主题样式" class="headerlink" title="设置next主题和主题样式"></a>设置next主题和主题样式</h1><p>站点配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p> 主题配置文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="设置首页不显示全文"><a href="#设置首页不显示全文" class="headerlink" title="设置首页不显示全文"></a>设置首页不显示全文</h1><p> 主题配置文件修改： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Automatically excerpt description in homepage as preamble text.</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># Read more button</span><br><span class="line"># If true, the read more button will be displayed in excerpt section.</span><br><span class="line">read_more_btn: true</span><br></pre></td></tr></table></figure>

<p>方法一：写概述</p>
<p>​        在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>比较不方便的是还得写一下概述，很多时候会懒得写概述，于是就需要第二种方法了。</p>
<p>方法二：文章截断</p>
<p>在需要截断的地方加入：</p>
 <a id="more"></a> 

<h1 id="设置canvas-ribbon动态背景"><a href="#设置canvas-ribbon动态背景" class="headerlink" title="设置canvas_ribbon动态背景"></a>设置canvas_ribbon动态背景</h1><h2 id="进入到-NexT-主题目录下"><a href="#进入到-NexT-主题目录下" class="headerlink" title="进入到 NexT 主题目录下"></a>进入到 NexT 主题目录下</h2><h2 id="安装模块到-source-lib-目录下"><a href="#安装模块到-source-lib-目录下" class="headerlink" title="安装模块到 source/lib 目录下"></a>安装模块到 source/lib 目录下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-ribbon source&#x2F;lib&#x2F;canvas-ribbon</span><br></pre></td></tr></table></figure>

<h2 id="编辑主题配置文件，启用-canvas-ribbon-模块，如下："><a href="#编辑主题配置文件，启用-canvas-ribbon-模块，如下：" class="headerlink" title="编辑主题配置文件，启用 canvas_ribbon 模块，如下："></a>编辑主题配置文件，启用 canvas_ribbon 模块，如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 300</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="设置侧栏阅读进度百分比"><a href="#设置侧栏阅读进度百分比" class="headerlink" title="设置侧栏阅读进度百分比"></a>设置侧栏阅读进度百分比</h1><p> 编辑站点配置文件，修改 back2top 部分如下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h1 id="设置阅读位置标记功能"><a href="#设置阅读位置标记功能" class="headerlink" title="设置阅读位置标记功能"></a>设置阅读位置标记功能</h1><h2 id="进入到-NexT-主题目录下-1"><a href="#进入到-NexT-主题目录下-1" class="headerlink" title="进入到 NexT 主题目录下"></a>进入到 NexT 主题目录下</h2><h2 id="安装模块到-source-lib-目录下："><a href="#安装模块到-source-lib-目录下：" class="headerlink" title="安装模块到 source/lib 目录下："></a>安装模块到 source/lib 目录下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-bookmark.git source&#x2F;lib&#x2F;bookmark</span><br></pre></td></tr></table></figure>

<h2 id="编辑主题配置文件，启用-bookmark-模块，如下："><a href="#编辑主题配置文件，启用-bookmark-模块，如下：" class="headerlink" title="编辑主题配置文件，启用 bookmark 模块，如下："></a>编辑主题配置文件，启用 bookmark 模块，如下：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Bookmark Support</span><br><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  # Customize the color of the bookmark.</span><br><span class="line">  color: &quot;#222&quot;</span><br><span class="line">  # If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="line">  # If manual, only save it by clicking the bookmark-icon.</span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure>

<h1 id="设置字数统计和预计阅读时间"><a href="#设置字数统计和预计阅读时间" class="headerlink" title="设置字数统计和预计阅读时间"></a>设置字数统计和预计阅读时间</h1><h2 id="进入到博客主站目录下，安装-Hexo-插件"><a href="#进入到博客主站目录下，安装-Hexo-插件" class="headerlink" title="进入到博客主站目录下，安装 Hexo 插件"></a>进入到博客主站目录下，安装 Hexo 插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<h2 id="编辑主题配置文件，添加如下内容："><a href="#编辑主题配置文件，添加如下内容：" class="headerlink" title="编辑主题配置文件，添加如下内容："></a>编辑主题配置文件，添加如下内容：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true </span><br><span class="line">  time: true </span><br><span class="line">  total_symbols: true </span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>

<h1 id="添加图片放大预览功能"><a href="#添加图片放大预览功能" class="headerlink" title="添加图片放大预览功能"></a>添加图片放大预览功能</h1><p>在主题配置文件，启用 fancybox，修改配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<h1 id="图片懒加载设置"><a href="#图片懒加载设置" class="headerlink" title="图片懒加载设置"></a>图片懒加载设置</h1><p> 在主题配置文件中启用lazyload </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lazyload: true</span><br></pre></td></tr></table></figure>

<h1 id="点击出现桃心效果-可选"><a href="#点击出现桃心效果-可选" class="headerlink" title="点击出现桃心效果(可选)"></a>点击出现桃心效果(可选)</h1><h2 id="在主题-source-js-下新建文件-clicklove-js，添加内容如下"><a href="#在主题-source-js-下新建文件-clicklove-js，添加内容如下" class="headerlink" title="在主题/source/js/下新建文件 clicklove.js，添加内容如下"></a>在主题/source/js/下新建文件 clicklove.js，添加内容如下</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>

<h2 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改_layout.swig</h2><p>在主题\layout_layout.swig文件末尾添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;clicklove.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="主页文章添加置顶图标-可选"><a href="#主页文章添加置顶图标-可选" class="headerlink" title="主页文章添加置顶图标(可选)"></a>主页文章添加置顶图标(可选)</h1><p>修改主题的/layout/_macro/post.swig 文件，在</p>
<p>下加入 “置顶” 标识，如图标和文字描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">&lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;font color&#x3D;7D26CD&gt;&#123;&#123; __(&#39;post.sticky&#39;) &#125;&#125;&lt;&#x2F;font&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="标签云特效（可选）"><a href="#标签云特效（可选）" class="headerlink" title="标签云特效（可选）"></a>标签云特效（可选）</h1><h1 id="给博客添加fork-github"><a href="#给博客添加fork-github" class="headerlink" title="给博客添加fork github"></a>给博客添加fork github</h1><p> 在<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fblog%2F273-github-ribbons" target="_blank" rel="noopener">GitHub Ribbons</a>或<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ftholman.com%2Fgithub-corners%2F" target="_blank" rel="noopener">GitHub Corners</a>选择一款你喜欢的挂饰，拷贝方框内的代码： </p>
<p> 将刚刚复制的挂饰代码，添加到<code>Blog/themes/next/layout/_layout.swig</code>文件中，添加位置如下图所示(放在``下方)： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>//第14行</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"你的GitHub地址"</span> <span class="attr">class</span>=<span class="string">"github-corner"</span> <span class="attr">aria-label</span>=<span class="string">"View source on GitHub"</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attr">style</span>=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">style</span>=<span class="string">"transform-origin: 130px 106px;"</span> <span class="attr">class</span>=<span class="string">"octo-arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">class</span>=<span class="string">"octo-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;<span class="keyword">@keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0</span>)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">25deg</span>)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">10deg</span>)&#125;&#125;<span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/WPHeader"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="修改链接的样式"><a href="#修改链接的样式" class="headerlink" title="修改链接的样式"></a>修改链接的样式</h1><div class="headband"></div>]]></content>
      <tags>
        <tag>hexo nexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习笔记一</title>
    <url>/2020/06/01/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、Mybatis环境和知识储备前提"><a href="#一、Mybatis环境和知识储备前提" class="headerlink" title="一、Mybatis环境和知识储备前提"></a>一、Mybatis环境和知识储备前提</h1><ul>
<li>JDK1.8</li>
<li>Mysql 5.7</li>
<li>maven3.6.1</li>
<li>IDEA<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
</li>
</ul>
<h1 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h1><p><a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">中文文档</a></p>
<p><a href="https://github.com/mybatis/mybatis-3/" target="_blank" rel="noopener">Github</a></p>
<p><a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven中央仓库</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mabits --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> MyBatis 是一款优秀的<strong>持久层框架</strong> ,</p>
<ul>
<li><p>数据持久化：将程序的数据在持久状态（数据库jdbc、IO）和瞬时状态（内存）转化的过程</p>
</li>
<li><p>持久层：完成持久化工作的代码块</p>
</li>
</ul>
<h1 id="三、第一个Mybatis程序"><a href="#三、第一个Mybatis程序" class="headerlink" title="三、第一个Mybatis程序"></a>三、第一个Mybatis程序</h1><p>思路：搭建环境-&gt;导入mybatis-&gt;编写代码-&gt;测试</p>
<h2 id="3-1搭建环境"><a href="#3-1搭建环境" class="headerlink" title="3.1搭建环境"></a>3.1搭建环境</h2><h3 id="3-1-1搭建数据库"><a href="#3-1-1搭建数据库" class="headerlink" title="3.1.1搭建数据库"></a>3.1.1搭建数据库</h3><p><img data-src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200602125129140.png" alt="image-20200602125129140"></p>
]]></content>
      <tags>
        <tag>Mybatis Mysql</tag>
      </tags>
  </entry>
</search>
